//
// Created by Joshua Heinemann on 04.06.20.
// TU-Braunschweig (heineman@ibr.cs.tu-bs.de)
//
#define FAASM_SGX_ATTESTATION 1
enclave{
    include "../../../include/sgx/faasm_sgx_error.h"
    include "../../../include/sgx/sgx_wamr_attestation.h"
    include "../../../third-party/wamr/core/iwasm/include/wasm_export.h"
    from "sgx_tstdc.edl" import *;
    trusted{
        public faasm_sgx_status_t sgx_wamr_enclave_unload_module(uint32_t thread_id);
        public faasm_sgx_status_t sgx_wamr_enclave_call_function(uint32_t thread_id, uint32_t func_id);
#if(FAASM_SGX_ATTESTATION)
        public faasm_sgx_status_t sgx_wamr_enclave_load_module([user_check] const void* wasm_opcode_ptr, uint32_t wasm_opcode_size, [out] uint32_t* thread_id, [user_check] sgx_wamr_msg_t** response_ptr);
#else
        public faasm_sgx_status_t sgx_wamr_enclave_load_module([user_check] const void* wasm_opcode_ptr, uint32_t wasm_opcode_size, [out] uint32_t* thread_id);
#endif
        public faasm_sgx_status_t sgx_wamr_enclave_init_wamr(uint32_t thread_number);
    };
    untrusted{
        void ocall_printf([in, string] const char* msg);
#if(FAASM_SGX_ATTESTATION)
        faasm_sgx_status_t ocall_init_crt(void);
        faasm_sgx_status_t ocall_send_msg([in, size=msg_len]sgx_wamr_msg_t* msg, uint32_t msg_len);
#endif
        uint64_t ocall_faasm_read_state_size([in, string] char* key);
        uint64_t ocall_faasm_read_state([in, string] char* key, [out, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len);
        void ocall_faasm_read_appended_state([in, string] char* key, [out, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len, uint32_t element_num);
        void ocall_faasm_read_state_offset([in, string] char* key, uint64_t total_len, uint64_t offset, [out, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len);
        void ocall_faasm_write_state([in, string] char* key, [in, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len);
        void ocall_faasm_append_state([in, string] char* key, [in, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len);
        void ocall_faasm_clear_appended_state([in, string] char* key);
        void ocall_faasm_write_state_offset([in, string] char* key, uint64_t total_len, uint64_t offset, [in, size=buffer_len] uint8_t* buffer_ptr, uint32_t buffer_len);
        unsigned int ocall_faasm_get_input_size(void);
        void ocall_faasm_get_input([in,out, size=buffer_size] uint8_t* buffer, unsigned int buffer_size);
        void ocall_faasm_set_output([in, size=output_size] uint8_t* output, unsigned int output_size);
        unsigned int ocall_faasm_chain_function_input([in, string] const char* name, [in, size=input_size] uint8_t* input, long input_size);
        unsigned int ocall_faasm_chain_this_input(int idx, [in, size=input_size] uint8_t* input, long input_size);
        unsigned int ocall_faasm_await_call(unsigned int call_id);
        unsigned int ocall_faasm_await_call_output(unsigned int call_id, [out, size=buffer_size] uint8_t* buffer, unsigned int buffer_size);
    };
};