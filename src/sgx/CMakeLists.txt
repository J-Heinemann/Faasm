#
# Created by Joshua Heinemann on 04.06.20.
# TU-Braunschweig (heineman@ibr.cs.tu-bs.de)
#
#set(RUNNER_LIBS
#        faaslet_lib
#        wasm
#        wavmmodule
#        util
#        module_cache
#        system
#        )
set(SGX_DEBUG_MODE 1)
set(SGX_SDK_PATH /opt/intel/sgxsdk)
set(SGX_SDK_LIB_PATH ${SGX_SDK_PATH}/lib64)
set(SGX_SDK_ENCLAVE_SIGNER ${SGX_SDK_PATH}/bin/x64/sgx_sign)
set(SGX_SDK_ENCLAVE_EDGER8R ${SGX_SDK_PATH}/bin/x64/sgx_edger8r)
set(SGX_C_GLOBAL_FLAGS -m64)
set(THREADS_PREFER_PTHREAD_FLAG ON)
set(SGX_RUNNER_SOURCE_FILES sgx_runner.cpp SGXWAMRWasmModule.cpp)
set(SGX_RUNNER_ENCLAVE_SOURCE_FILES sgx_runner_enclave.cpp)
set(SGX_RUNNER_URTS_OBJECTS ${CMAKE_CURRENT_BINARY_DIR}/sgx_runner_enclave_u.o)
set(SGX_RUNNER_ENCLAVE_TRTS_OBJECTS ${CMAKE_CURRENT_BINARY_DIR}/sgx_runner_enclave_t.o)
if(FAASM_WAMR_SUPPORT)
message ("-- SGX-WAMR Configuration:
     FAASM_SGX_WAMR_HEAP_SIZE: ${FAASM_SGX_WAMR_HEAP_SIZE}KB
     FAASM_SGX_WAMR_MODULE_ERROR_BUFFER_SIZE: ${FAASM_SGX_WAMR_MODULE_ERROR_BUFFER_SIZE}B
     FAASM_SGX_WAMR_INSTANCE_DEFAULT_HEAP_SIZE: ${FAASM_SGX_WAMR_INSTANCE_DEFAULT_HEAP_SIZE}B
     FAASM_SGX_WAMR_INSTANCE_DEFAULT_STACK_SIZE: ${FAASM_SGX_WAMR_INSTANCE_DEFAULT_STACK_SIZE}B")
    add_definitions(-DFAASM_SGX_WAMR_HEAP_SIZE=${FAASM_SGX_WAMR_HEAP_SIZE} -DFAASM_SGX_WAMR_MODULE_ERROR_BUFFER_SIZE=${FAASM_SGX_WAMR_MODULE_ERROR_BUFFER_SIZE}
            -DFAASM_SGX_WAMR_INSTANCE_DEFAULT_HEAP_SIZE=${FAASM_SGX_WAMR_INSTANCE_DEFAULT_HEAP_SIZE} -DFAASM_SGX_WAMR_INSTANCE_DEFAULT_STACK_SIZE=${FAASM_SGX_WAMR_INSTANCE_DEFAULT_STACK_SIZE})
endif()
find_package(Threads REQUIRED)
if(EXISTS ${SGX_SDK_PATH})
    message(STATUS "Found SGX-SDK: TRUE")
else()
    message(STATUS "Found SGX-SDK: FALSE")
    message(FATAL_ERROR "SGX-SDK not installed in ${SGX_SDK_PATH}")
endif()
if(SGX_SIM_MODE)
    message(STATUS "Enclave will be build in simulation mode")
elseif(NOT SGX_SIM_MODE)
    message(STATUS "Enclave will be build in hardware mode")
endif()
if(SGX_DEBUG_MODE)
    message(STATUS "Enclave will be build with debug information and -O0 optimization")
    set(SGX_C_GLOBAL_FLAGS ${SGX_C_GLOBAL_FLAGS} -O0 -g)
    set(SGX_RUNNER_C_FLAGS ${SGX_C_GLOBAL_FLAGS} -fPIC -Wno-attributes -DDEBUG -UNDEBUG -UEDEBUG)
    set(SGX_RUNNER_ENCLAVE_C_FLAGS ${SGX_C_GLOBAL_FLAGS} -nostdinc -fvisibility=hidden -fpie -ffunction-sections -fdata-sections -fstack-protector-strong )
elseif(NOT SGX_DEBUG_MODE)
    message(STATUS "Enclave will be build without debug information and -O2 optimization")
    set(SGX_C_GLOBAL_FLAGS ${SGX_C_GLOBAL_FLAGS} -O2)
    set(SGX_RUNNER_C_FLAGS ${SGX_C_GLOBAL_FLAGS} -fPIC -Wno-attributes)
    set(SGX_RUNNER_ENCLAVE_C_FLAGS ${SGX_C_GLOBAL_FLAGS} -nostdinc -fvisibility=hidden -fpie -ffunction-sections -fdata-sections -fstack-protector-strong )
endif()
link_directories(${SGX_SDK_LIB_PATH})
include_directories(${FAASM_INCLUDE_DIR}/sgx)
add_executable(sgx_runner ${SGX_RUNNER_SOURCE_FILES})
target_include_directories(sgx_runner PRIVATE ${SGX_SDK_PATH}/include)
add_dependencies(sgx_runner libwamr sgx_runner_enclave)
target_compile_options(sgx_runner PRIVATE ${SGX_RUNNER_C_FLAGS} -std=c++11)
target_link_options(sgx_runner PRIVATE ${SGX_C_GLOBAL_FLAGS} ${SGX_RUNNER_URTS_OBJECTS})
if(SGX_SIM_MODE)
    target_link_libraries(sgx_runner sgx_urts_sim sgx_uae_service_sim Threads::Threads storage wasm)
else(NOT SGX_SIM_MODE)
    target_link_libraries(sgx_runner sgx_urts sgx_uae_service Threads::Threads storage wasm)
endif()
add_library(sgx_runner_enclave SHARED ${SGX_RUNNER_ENCLAVE_SOURCE_FILES})
set_target_properties(sgx_runner_enclave PROPERTIES PREFIX "")
target_include_directories(sgx_runner_enclave PRIVATE ${SGX_SDK_PATH}/include ${SGX_SDK_PATH}/include/tlibc ${SGX_SDK_PATH}/include/libcxx ${WAMR_ROOT_DIR}/core/iwasm/include ${WAMR_ROOT_DIR}/core/iwasm/aot)
target_compile_options(sgx_runner_enclave PRIVATE ${SGX_RUNNER_ENCLAVE_C_FLAGS} -std=c++11 -nostdinc++)
target_link_options(sgx_runner_enclave PRIVATE ${SGX_RUNNER_ENCLAVE_TRTS_OBJECTS} ${SGX_C_GLOBAL_FLAGS} -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -Bstatic -Bsymbolic -Wl,-pie,-eenclave_entry -Wl,--export-dynamic -Wl,--defsym,__ImageBase=0 -Wl,--gc-sections -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/sgx_runner_enclave.lds)
if(SGX_SIM_MODE)
    target_link_libraries(sgx_runner_enclave -Wl,--whole-archive sgx_trts_sim -Wl,--no-whole-archive -Wl,--start-group sgx_tstdc sgx_tcxx sgx_tcrypto sgx_tservice_sim libwamr -Wl,--end-group)
elseif(NOT SGX_SIM_MODE)
    target_link_libraries(sgx_runner_enclave -Wl,--whole-archive sgx_trts -Wl,--no-whole-archive -Wl,--start-group sgx_tstdc sgx_tcxx sgx_tcrypto sgx_tservice libwamr -Wl,--end-group)
endif()
add_custom_command(TARGET sgx_runner_enclave PRE_BUILD COMMAND ${SGX_SDK_ENCLAVE_EDGER8R} --trusted sgx_runner_enclave.edl --search-path /usr/local/code/faasm/src/sgx --search-path ${SGX_SDK_PATH}/include)
add_custom_command(TARGET sgx_runner PRE_BUILD COMMAND ${SGX_SDK_ENCLAVE_EDGER8R} --untrusted sgx_runner_enclave.edl --search-path /usr/local/code/faasm/src/sgx --search-path ${SGX_SDK_PATH}/include)
add_custom_command(TARGET sgx_runner_enclave PRE_BUILD COMMAND gcc ${SGX_RUNNER_ENCLAVE_C_FLAGS} -I${SGX_SDK_PATH}/include -I${SGX_SDK_PATH}/include/tlibc -c sgx_runner_enclave_t.c -o sgx_runner_enclave_t.o)
add_custom_command(TARGET sgx_runner PRE_BUILD COMMAND gcc ${SGX_RUNNER_C_FLAGS} -I${SGX_SDK_PATH}/include -c sgx_runner_enclave_u.c -o sgx_runner_enclave_u.o)
add_custom_command(TARGET sgx_runner_enclave POST_BUILD COMMAND ${SGX_SDK_ENCLAVE_SIGNER} sign -key ${CMAKE_CURRENT_SOURCE_DIR}/sgx_runner_enclave.pem -enclave ${CMAKE_BINARY_DIR}/lib/sgx_runner_enclave.so -out ${CMAKE_BINARY_DIR}/bin/sgx_runner_enclave.sign.so -config ${CMAKE_CURRENT_SOURCE_DIR}/sgx_runner_enclave.config)
